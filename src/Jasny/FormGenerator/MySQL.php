<?php
/**
 * Jasny Form Builder - Get full featured forms fast.
 * 
 * @author  Arnold Daniels <arnold@jasny.net>
 * @license https://raw.github.com/jasny/formbuilder/master/LICENSE MIT
 * @link    https://jasny.github.io/formbuilder
 */
/** */
namespace Jasny\FormGenerator;

/**
 * Generate FormBuilder\Form classes for MySQL tables.
 */
class MySQL extends FormGenerator
{
    /**
     * PHP type for each MySQL field type.
     * @var array
     */
    public static $types = [
        'id' => 'hidden',
        'bit' => 'number',
        'bit(1)' => 'boolean',
        'bool' => 'boolean',
        'boolean' => 'boolean',
        'tinyint(1)' => 'boolean',
        'tinyint' => 'number',
        'smallint' => 'number',
        'mediumint' => 'number',
        'int' => 'number',
        'integer' => 'number',
        'bigint' => 'number',
        'decimal' => 'decimal',
        'dec' => 'decimal',
        'numeric' => 'decimal',
        'fixed' => 'decimal',
        'float' => 'decimal',
        'double' => 'decimal',
        'double precision' => 'decimal',
        'real' => 'decimal',
        'date' => 'date',
        'datetime' => 'datetime',
        'timestamp' => 'datetime',
        'time' => 'time',
        'year' => 'number',
        'char' => 'text',
        'varchar' => 'text',
        'binary' => 'textarea',
        'varbinary' => 'textarea',
        'tinyblob' => 'textarea',
        'tinytext' => 'textarea',
        'blob ' => 'textarea',
        'text' => 'textarea',
        'mediumblob' => 'textarea',
        'mediumtext' => 'textarea',
        'longblob' => 'textarea',
        'longtext' => 'textarea',
        'enum' => 'choice',
        'set' => 'multi'
    ];
    
    /**
     * Get information about the table, required to generate the form.
     * 
     * @param string $table
     * @retur array
     */
    protected static function getInfo($table)
    {
        $rows = $this->query("DESCRIBE `$table`");

        $fields = [];
        foreach ($rows as $row) {
            $name = $row['Field'];
            
            $type = $row['Type'];
            if (strpos($type, '(') !== false) $type = substr($type, strpos($type, '(')+1, -1);
            if (strpos($row['Extra'], 'auto_increment') !== false) $type = 'id';
            
            $options = null;
            if ($type === 'emum' || $type === 'set') {
                preg_match_all("/'([^'\\\\]++|\\\\.+)'/", substr($type, strpos($type, '(')+1, -1), $matches);
                $options = $matches[1];
            }
            
            $fields[] = (object)compact('name', 'type', 'options');
        }

        return (object)[
            'name' => $table,
            'fields' => $fields
        ];
    }
    
    /**
     * Get a hash to seen if the table has been modified.
     * 
     * @param array $info Table info
     * @return string
     */
    protected static function getChecksum($info)
    {
        return md5(serialize(compact('pk', 'defaults', 'types')));
    }
    
    
    /**
     * Generate the Form class
     * 
     * @param object $info       Table info
     * @param string $classname
     * @param string $ns
     */
    protected static function generate($info, $classname, $ns)
    {
        $checksum = static::getChecksum($info);
        
        // Generate code
        $namespace = $ns ? "namespace $ns;\n" : '';
        
        $addFields = "";
        foreach ($info->fields as $field) {
            $addFields .= "";
        }
        
        $code = <<<PHP
$namespace
                
use Jasny\FormBuilder\Form
                
/**
 * Form for MySQL table `{$info->table}`.
 * {@internal This file is automatically generated and may be overwritten.}}
 *
 * @hash $checksum
 */
class $classname extends Form
{
    /**
     * Add the fields to the form
     */
    public function addFields()
    {
         
    }
}
PHP;
        
        return $code;
    }
    
    
    /**
     * Enable the generator.
     * 
     * @param object  $source      Source object to use
     * @param string  $cache_path  Directory to save the cache files
     * @param string  $namespace   Namespace for the Form classes
     */
    public static function enable($source, $cache_path=null, $namespace=null)
    {
        if (!$source instanceof \mysqli && !$source instanceof \PDO) {
            $type = is_object(self::$source) ? get_class(self::$source) . " object" : gettype(self::$source);
            throw new \Exception("Expected a mysqli or PDO object as source, but got a $type");
        } elseif ($source instanceof \PDO && $source->getAttribute(PDO::ATTR_DRIVER_NAME) != 'mysql') {
            throw new \Exception("PDO is connected to a " . $source->getAttribute(PDO::ATTR_DRIVER_NAME). " database");
        }
        
        parent::enable($source, $cache_path, $namespace);
    }
    
    
    /**
     * Perform an SQL query
     * 
     * @param string $sql
     * @return array
     */
    protected static function query($sql)
    {
        if (static::$source instanceof \mysqli) return static::queryMysqli($sql);
        if (static::$source instanceof \PDO) return static::queryPDO($sql);
    }

    /**
     * Query using MySQLi.
     * 
     * @param string $sql
     * @return array
     */
    protected static function queryMysqli($sql)
    {
        $result = static::$source->query($sql);
        if (!$result) throw new \Exception("Query failed: " . static::$source->error);

        // mysqlnd
        if (function_exists('mysqli_fetch_all')) return $result->fetch_all(MYSQLI_ASSOC);

        // no mysqlnd
        $rows = [];
        while ($row = $result->fetch_assoc()) $rows[] = $row;
        return $rows;
    }
    
    /**
     * Query using PDO.
     * 
     * @param string $sql
     * @return array
     */
    protected static function queryPDO($sql)
    {
        $result = static::$source->query($sql);
        if (!$result) {
            $error = static::$source->errorInfo;
            throw new \Exception("Query failed: " . $error[2]);
        }
        
        return $result->fetchAll(PDO::FETCH_ASSOC);
    }
    
    
    /**
     * Automatically create classes for table gateways and records
     * 
     * @param string $class
     */
    protected static function autoload($class)
    {
        list($classname, $ns) = static::splitClass($class);
        
        if (substr($classname, -4) !== 'Form') return;
        if (preg_replace('/(^|\\\\)' . static::$baseNamespace . '/', '', $ns) != static::$namespace) return;
        
        $name = self::uncamelcase(preg_replace('/Form$/i', '', $classname));
        if (!empty($name)) $info = static::getTableInfo($name);
        
        if (empty($info)) return; // Class doesn't match any table
        if (self::loadFromCache($class, self::getChecksum($info))) return;

        $code = static::generate($name, $classname, $ns);
        
        self::cacheAndLoad($class, "<?php\n" . $code) or eval($code);
    }
    
    
    /**
     * Turn a camelcase string in a string using underscores.
     * 
     * @param string $string
     * @return string
     */
    protected static function uncamelcase($string)
    {
        return strtolower(preg_replace('/(?<=[a-z])([A-Z])(?![A-Z])/', '_$1', $string));
    }
    
    /**
     * Turn a string using underscores in a camelcase string.
     * 
     * @param string $string
     * @return string
     */
    protected static function camelcase($string)
    {
        return str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));
    }    
}
