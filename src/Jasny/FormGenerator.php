<?php
/**
 * Jasny Form Builder - Get full featured forms fast.
 * 
 * @author  Arnold Daniels <arnold@jasny.net>
 * @license https://raw.github.com/jasny/formbuilder/master/LICENSE MIT
 * @link    https://jasny.github.io/formbuilder
 */
/** */
namespace Jasny;

/**
 * Generate Form classes.
 * 
 * <code>
 *   $db = new mysqli();
 *   if (getenv('APPLICATION_ENV') == 'prod')
 *     set_include_path(get_include_path() . PATH_SEPARATOR . __DIR__ . '/cache/forms');
 *   Jasny\FormGenerator::enable($db, __DIR__ . '/cache/forms');
 * </code>
 */
abstract class FormGenerator
{
    /**
     * Source object
     * @var mixed
     */
    protected static $source;
    
    /**
     * Path to cache
     * @var string
     */
    protected static $cachePath;
    
    /**
     * Namespace for the Form classes
     * @var string
     */
    public static $namespace;
    
    /**
     * Namespace for base classes
     * @var string
     */
    public static $baseNamespace = 'Base';
    
    
    /**
     * Get info about the field on building the form element.
     * 
     * @param array $field
     * @return string
     */
    abstract protected function getFieldInfo($field);
    
    /**
     * Get a hash to seen if the table has been modified.
     * 
     * @param object $info  Table info
     * @return string
     */
    protected static function getChecksum($info)
    {
        return md5(serialize($info));
    }
    
    /**
     * Generate code for a form element
     * 
     * @param array $options
     * @reutrn string
     */
    protected static function generateBuildElement($options)
    {
        $fn = 'build' . static::camelcase($options['name']);
        
        $type = $options['type'];
        unset($options['type']);
        $opts = ltrim(self::indent(var_export($options, true), 4));
        
        return <<<PHP
/**
 * Build element for field `{$options['name']}`
 *
 * @param string \$type     Element type
 * @param array  \$options  Element options
 * @param array  \$attr     HTML attributes
 * @return FormBuilder\Element|FormBuilder\Control
 */
protected function $fn(\$type=null, array \$options=[], array \$attr=[])
{
    if (!isset(\$type)) \$type = '$type';
         
    \$options += $opts;
    
    return \$this->build(\$type, \$options, \$attr);
}
PHP;
    }
    
    /**
     * Generate the Form class
     * 
     * @param object $info       Table info
     * @param string $classname
     * @param string $ns
     */
    protected static function generate($info, $classname=null, $ns=null)
    {
        if (!isset($classname)) $classname = static::camelcase($info->table) . 'Form';
        $namespace = $ns ? "namespace $ns;\n" : '';
        
        $checksum = static::getChecksum($info);
        
        $add = [];
        $build = [];
        foreach ($info->fields as $field) {
            $options = static::getFieldInfo($field);
            if (!$options) continue;
            
            $add[] = "\$this->add(':{$options['name']}');";
            $build[] = static::generateBuildElement($options);
        }
        
        $addElements = join("\n        ", $add);
        $buildElements = static::indent(join("\n\n", $build), 4);
        
        $code = <<<PHP
$namespace
use Jasny\FormBuilder\Form;
                
/**
 * Form for table `{$info->name}`.
 * {@internal This file is automatically generated and may be overwritten.}}
 *
 * @hash $checksum
 */
class $classname extends Form
{
    /**
     * Class constructor.
     */
    public function __construct()
    {
        parent::__construct(['name'=>'{$info->name}']);
        
        $addElements
        \$this->add('button', ['description'=>'Save', 'name'=>'submit'], ['type'=>'submit']);
    }
         
    /**
     * Factory method
     * 
     * @param string \$type     Element type
     * @param array  \$options  Element options
     * @param array  \$attr     HTML attributes
     * @return FormBuilder\Element|FormBuilder\Control
     */
    protected function build(\$type, array \$options=[], array \$attr=[])
    {
        if (is_string(\$type) && \$type[0] === ':') {
            \$method = 'build' . str_replace(' ', '', ucwords(str_replace('_', ' ', substr(\$type, 1))));
            if (method_exists(\$this, \$method)) return \$this->\$method();
        }
        
        return parent::build(\$type, \$options, \$attr);
    }
         
$buildElements
}
PHP;
        
        return $code;
    }
    
    /**
     * Split full class in class name and namespase
     * 
     * @param string $class
     * @param string $ns     Replace namespace
     * @return array (class name, namespace, full class)
     */
    protected static function splitClass($class, $ns=null)
    {
        $parts = explode('\\', $class);
        $classname = array_pop($parts);

        if (!isset($ns)) $ns = join('\\', $parts);
        return array($classname, $ns, ($ns ? $ns . '\\' : '') . $class);
    }
    
    /**
     * See if there is a valid file in cache and include it.
     * 
     * @param string $class
     * @param string $checksum  Checksum to verify
     * @return boolean
     */
    protected static function loadFromCache($class, $checksum=null)
    {
        if (!isset(self::$cachePath)) return false;
        
        $filename = self::$cachePath . '/' . strtr($class, '\\_', '//') . '.php';
        if (!file_exists($filename)) return false;
        
        if (isset($checksum)) {
            $code = file_get_contents($filename);
            if (!strpos($code, "@checksum $checksum")) return false;
        }
        
        include $filename;
        return true;
    }
    
    /**
     * Save the generated code to cache and include it
     * 
     * @param string $class
     * @param string $code
     * @return boolean
     */
    protected static function cacheAndLoad($class, $code)
    {
        if (!isset(self::$cachePath)) return false;
        
        $filename = self::$cachePath . '/' . strtr($class, '\\_', '//') . '.php';

        if (!file_exists(dirname($filename))) mkdir(dirname($filename), 0777, true);
        if (!file_put_contents($filename, $code)) return false;
        
        include $filename;
        return true;
    }
    
    /**
     * Enable the generator.
     * 
     * @param object  $source      Source object to use
     * @param string  $cache_path  Directory to save the cache files
     */
    public static function enable($source, $cache_path=null)
    {
        static::$source = $source;
        static::$cachePath = $cache_path;

        $class = get_called_class() === __CLASS__? static::getDriver($source) : get_called_class();
        spl_autoload_register([$class, 'autoload']);
    }

    /**
     * Get generator class for the source.
     * 
     * @param mixed $source
     * @return string
     */
    protected function getDriver($source)
    {
        if ($source instanceof \mysqli) return __CLASS__ . '\\MySQL';
        
        $type = is_object(self::$source) ? get_class(self::$source) . " object" : gettype(self::$source);
        throw new \Exception("Sorry I don't know how to query a $type");
    }
    
    
    /**
     * Automatically create classes for table gateways and records
     * 
     * @param string $class
     */
    abstract protected static function autoload($class);
    
    
    /**
     * Turn a camelcase string in a string using underscores.
     * 
     * @param string $string
     * @return string
     */
    protected static function uncamelcase($string)
    {
        return strtolower(preg_replace('/(?<=[a-z])([A-Z])(?![A-Z])/', '_$1', $string));
    }
    
    /**
     * Turn a string using underscores in a camelcase string.
     * 
     * @param string $string
     * @return string
     */
    protected static function camelcase($string)
    {
        return str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));
    }
    
    /**
     * Indent each line
     * 
     * @param string $code
     * @return string
     */
    protected static function indent($code, $spaces = 4)
    {
        return preg_replace('~^~m', str_repeat(' ', $spaces), $code);
    }
}
